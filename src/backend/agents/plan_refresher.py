import os
from pathlib import Path

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain_core.messages import SystemMessage, HumanMessage, ToolMessage

from src.backend.agents.agent_node import AgentNode
from src.backend.agents.agent_state import AgentState
from src.backend.enums.next_action import NextAction
from src.backend.miro_api import MiroApiClient
from src.backend.models.miro_board import MiroBoard
from src.backend.models.miro_item import MiroItem
from src.backend.models.plan.plan import Plan


def _load_prompt_template(filename: str) -> str:
    """Load a prompt template from the prompts directory."""
    prompts_dir = Path(__file__).parent / "prompts"
    prompt_file = prompts_dir / filename
    with open(prompt_file, 'r', encoding='utf-8') as f:
        return f.read()


class PlanRefresher(AgentNode):
    def __init__(self):
        super().__init__(NextAction.REFRESH_PLAN.name)

    def refresh_plan(self, state: AgentState):
        board = state.get("new_board")
        dump = {
            'product': board.get_product_frame().dump_sticky_notes(),
            'segments': board.get_segment_frame().dump_sticky_notes(),
            'channels': board.get_channels_frame().dump_sticky_notes(),
            'suggestions': ''  # Suggestions are generated by the LLM, not from sticky notes
        }

        # Initialize the LLM with structured output
        load_dotenv()
        model_name = os.getenv("OPENAI_MODEL", "gpt-4")
        llm = ChatOpenAI(model=model_name, temperature=0)

        # Use with_structured_output to get a Plan object directly
        llm_with_structure = llm.with_structured_output(Plan)

        # Load the system prompt
        system_prompt_text = _load_prompt_template("plan_refresher_system.txt")
        system_message = SystemMessage(content=system_prompt_text)

        # Load and format the user prompt with the dump data
        user_prompt_template = _load_prompt_template("plan_refresher_user.txt")
        user_content = user_prompt_template.format(
            product=dump['product'],
            segments=dump['segments'],
            channels=dump['channels'],
            suggestions=dump['suggestions']
        )
        user_message = HumanMessage(content=user_content)

        # Invoke the LLM to get structured output
        messages = [system_message, user_message]
        plan: Plan = llm_with_structure.invoke(messages)

        print(f"[plan_refresher] Plan extracted: {plan.model_dump()}")

        # Clear the Summary frame and add the plan as a formatted shape
        self._display_plan_in_summary_frame(board, plan)

        return {'plan': plan}

    def _display_plan_in_summary_frame(self, board: MiroBoard, plan: Plan):
        """Clear the Summary frame and display the plan in a nicely formatted shape."""
        api = MiroApiClient()
        summary_frame = board.get_summary_frame()

        if not summary_frame:
            print("[plan_refresher] Warning: Summary frame not found")
            return

        # Delete all children of the summary frame
        for child_id in summary_frame.children:
            try:
                api.delete_item(child_id)
                print(f"[plan_refresher] Deleted item {child_id} from Summary frame")
            except Exception as e:
                print(f"[plan_refresher] Error deleting item {child_id}: {e}")

        # Format the plan as HTML
        html_content = self._format_plan_as_html(plan)

        # Create a shape with the formatted plan
        api.create_parented_shape(
            parent_id=summary_frame.id,
            content=html_content,
            x=100,
            y=450,
            width=800,
            height=1000,
            fill_color="#FFFFFF",
            text_align="left",
            font_size=12,
            border_color="#E0E0E0",
            border_width=1,
        )

        print("[plan_refresher] Plan displayed in Summary frame")

    def _get_priority_icon(self, priority: str) -> str:
        """Return an icon based on the priority level."""
        priority_lower = priority.lower()
        if "high" in priority_lower or "critical" in priority_lower:
            return "ðŸ”´"
        elif "medium" in priority_lower or "moderate" in priority_lower:
            return "ðŸŸ¡"
        elif "low" in priority_lower:
            return "ðŸŸ¢"
        else:
            return "âšª"  # Default for unknown priority

    def _format_plan_as_html(self, plan: Plan) -> str:
        """Format the Plan object as nice HTML with sections and formatting."""
        html_parts = []

        # Title
        html_parts.append('<h1 style="font-size: 24px; margin-top: 0px;">ðŸ“‹ Marketing Plan</h1>')

        # Product Section
        html_parts.append('<br><h1 style="font-size: 24px; margin-top: 30px;">ðŸŽ¯ <strong>Product</strong></h1>')
        html_parts.append(f"<p><strong>Name:</strong> {plan.product.name}</p>")
        html_parts.append(f"<p><strong>Description:</strong> {plan.product.description}</p>")
        html_parts.append(f"<p><strong>Problem:</strong> {plan.product.problem}</p>")
        html_parts.append(f"<p><strong>Value Proposition:</strong> {plan.product.unique_value_proposition}</p>")

        if plan.product.goals:
            html_parts.append("<p><strong>Goals:</strong></p>")
            html_parts.append("<ul>")
            for goal in plan.product.goals:
                html_parts.append(f"<li>{goal}</li>")
            html_parts.append("</ul>")

        # Segments Section
        html_parts.append('<br><h1 style="font-size: 24px; margin-top: 30px;">ðŸ‘¥ <strong>Customer Segments</strong></h1>')
        if plan.segments:
            for segment in plan.segments:
                html_parts.append(f"<p><strong>{segment.name}:</strong> {segment.description}</p>")
        else:
            html_parts.append("<p><em>No segments defined</em></p>")

        # Channels Section
        html_parts.append('<br><h1 style="font-size: 24px; margin-top: 30px;">ðŸ“¢ <strong>Marketing Channels</strong></h1>')
        if plan.channels:
            for suggestion in plan.channels:
                html_parts.append(f"<p><strong>{suggestion.name}:</strong> {suggestion.description}</p>")
        else:
            html_parts.append("<p><em>No channels defined</em></p>")

        # Suggestions Section
        html_parts.append('<br><h1 style="font-size: 24px; margin-top: 30px;">ðŸ“¢ <strong>Suggestions</strong></h1>')
        if plan.suggestions:
            for suggestion in plan.suggestions:
                # Add priority icon based on priority level
                priority_icon = self._get_priority_icon(suggestion.priority)
                html_parts.append(f"<p>{priority_icon} <strong>{suggestion.name}:</strong> {suggestion.description}</p>")
        else:
            html_parts.append("<p><em>No suggestions defined</em></p>")

        return "".join(html_parts)
